name: esteira-ci-dev

on:
  pull_request:
    branches:
      - develop
    types:
      - opened
      - synchronize

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 11 ]
    steps:
      - name: Checa o git
        uses: actions/checkout@v2

      - name: Verificar branch snapshot
        run: |
          if [[ "${{ github.event.pull_request.base.ref }}" == "develop" ]]; then
            echo "A branch de destivo está correta"
          else
            echo "A branch de destino deve ser a develop"
            exit 1
          fi

      - name: Faz o set JDK Java
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build Maven
        run: mvn clean install

      - name: Roda os testes da aplicação
        run: mvn test

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner-cli-4.6.2.2472-linux.zip
          export PATH=$PATH:$(pwd)/sonar-scanner-4.6.2.2472-linux/bin
          sonar-scanner -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.sources=src/main -Dsonar.java.binaries=target/classes -Dsonar.host.url=https://sonarcloud.io

      - name: Checa se passou no SonarCloud Quality Gate do PR
        run: |
          prNumber=${{ github.event.pull_request.number }}
          project= ${{ secrets.SONAR_PROJECT_KEY }}
          prList=$(curl -s -X GET "https://sonarcloud.io/api/project_pull_requests/list?project=$project")
          echo "$prList"
          status=$(echo "$prList" | jq -r ".pullRequests[] | select(.key | contains(\"$prNumber\"))| .status.qualityGateStatus")
          echo "$status"
          if [[ "$status" != "OK" ]]; then
            echo "Quality Gate failed. Code does not meet the required quality criteria."
            exit 1
          fi

      - name: Cria uma release/tag no gitHub
        id: release
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commitish: develop

      - name: (DOCKER HUB) Faz o set do QEMU para
        uses: docker/setup-qemu-action@v2
      - name: (DOCKER HUB) Faz o set Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: (DOCKER HUB) Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: (DOCKER HUB) Build e push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: joaowudarski/trabalho-edsii:${{ steps.release.outputs.tag_name }}-SNAPSHOT

      - name: (RENDER) Deploy no ambiente de dev
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: srv-chl4uvu7avj2179ju4b0
          api-key: ${{ secrets.MY_RENDER_API_KEY }}

      - name: Wait for Render Deployment
        uses: bounceapp/render-action@0.6.0
        with:
          render-token: ${{ secrets.MY_RENDER_API_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          service-id: srv-chl4uvu7avj2179ju4b0
          retries: 20
          wait: 16000
          sleep: 30000

      - name: Resetar máquina virtual
        uses: actions/checkout@v2
        with:
          clean: true

      - name: (VERSAO) Instala o maven
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: (VERSAO) Atualiza versão no maven
        run: mvn -B versions:set -DnewVersion=${{ steps.release.outputs.tag_name }}-SNAPSHOT -DgenerateBackupPoms=false

      - name: (VERSAO) Realiza o commit no pom da nova versão
        uses: stefanzweifel/git-auto-commit-action@v4
